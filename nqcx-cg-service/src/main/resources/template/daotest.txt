/*
 * Copyright [(${#dates.format(date, 'yyyy')})] nqcx.org All right reserved. This software is the confidential and proprietary information
 * of nqcx.org ("Confidential Information"). You shall not disclose such Confidential Information and shall use
 * it only in accordance with the terms of the license agreement you entered into with nqcx.org.
 */

package [(${package})];

import org.junit.Test;
import org.nqcx.commons3.lang.o.DTO;
import org.nqcx.commons3.lang.o.NPage;
import org.nqcx.commons3.lang.o.NSort;
import org.nqcx.ido.commons.test.AutoInject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.TestExecutionListeners;
import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;
import org.springframework.test.context.transaction.TransactionalTestExecutionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
[# th:each="import : ${imports}"]
import [(${import})];
[/]
/**
 * @author [(${author})] [(${#dates.format(date, 'yyyy-MM-dd HH:mm')})]
 */
@TestExecutionListeners({TransactionalTestExecutionListener.class, DependencyInjectionTestExecutionListener.class})
public class [(${name})] extends AutoInject {

    @Autowired
    private [(${daoName})]<[(${poName})], Long> [(${daoVeriable})];

    @Test
    public void save() {
        [(${poName})] po = new [(${poName})]();
    [# th:each="pg : ${poSetters}"]
        [(${pg})]
    [/]
        [(${daoVeriable})].save(po);
    }

    @Test
    public void modify() {
        [(${poName})] po = new [(${poName})]();
    [# th:each="pg : ${poSetters}"]
        [(${pg})]
    [/]
        [(${daoVeriable})].modify(po);
    }

    @Test
    public void saveAll() {
        [(${poName})] po;
        List<[(${poName})]> list = new ArrayList<>();

        list.add(po = new [(${poName})]());
    [# th:each="pg : ${poSetters}"]
        [(${pg})]
    [/]
        [(${daoVeriable})].saveAll(list);
    }

    @Test
    public void modifyAll() {
        [(${poName})] po;
        List<[(${poName})]> list = new ArrayList<>();

        list.add(po = new [(${poName})]());
    [# th:each="pg : ${poSetters}"]
        [(${pg})]
    [/]
        [(${daoVeriable})].modifyAll(list);
    }

    @Test
    public void findById() {
        [(${poName})] poName = [(${daoVeriable})].findById(1L).orElse(null);
        System.out.println(poName);
    }

    @Test
    public void findAllByIds() {
        List<Long> ids = Arrays.asList(2L, 3L, 4L, 5L);
        List<[(${poName})]> list = [(${daoVeriable})].findAllByIds(ids);

        if (list == null)
            System.out.println(list);

        list.forEach(System.out::println);
    }

    @Test
    public void listAll() {
        DTO dto = new DTO();
        List<[(${poName})]> list = [(${daoVeriable})].listAll(dto);

        if (list == null)
            System.out.println(list);

        list.forEach(System.out::println);
    }

    @Test
    public void findAll() {
        // page and sort
        // Jpa 排序指定的是 pojo field name，Mybatis 排序需要指定数据库字段名，该问题会在未来的版本中解决
        DTO dtoRequest = new DTO().setPage(new NPage(1, 20))
                .setSort(NSort.by(new NSort.NOrder(NSort.NDirection.DESC, "id"),
                        new NSort.NOrder(NSort.NDirection.ASC, "t_create")));

        DTO dtoResult = [(${daoVeriable})].findAll(dtoRequest);

        if (dtoResult == null || dtoResult.getList() == null) {
            dtoResult.getList().forEach(System.out::println);
        }

        System.out.println(dtoResult);
    }

    @Test
    public void getCount() {
        DTO dtoRequest = new DTO();

        long count = [(${daoVeriable})].getCount(dtoRequest);

        System.out.println(count);
    }

    @Test
    public void deleteById() {
        [(${daoVeriable})].deleteById(6L);
    }

    @Test
    public void deleteByIds() {
        List<Long> ids = Arrays.asList(7L, 8L);
        [(${daoVeriable})].deleteByIds(ids);
    }
}
